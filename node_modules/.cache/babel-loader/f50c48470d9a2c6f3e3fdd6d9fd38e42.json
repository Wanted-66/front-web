{"ast":null,"code":"/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\r\n * Throttle execution of a function. Especially useful for rate limiting\r\n * execution of handlers on events like resize and scroll.\r\n *\r\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\r\n *                                            are most useful.\r\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\r\n *                                            as-is, to `callback` when the throttled-function is executed.\r\n * @param {object} [options] -              An object to configure options.\r\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\r\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\r\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\r\n *                                            `delay` milliseconds, the internal counter is reset).\r\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\r\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\r\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\r\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\r\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\r\n *\r\n * @returns {Function} A new, throttled, function.\r\n */\nfunction throttle(delay, callback, options) {\n  var _ref = options || {},\n    _ref$noTrailing = _ref.noTrailing,\n    noTrailing = _ref$noTrailing === void 0 ? false : _ref$noTrailing,\n    _ref$noLeading = _ref.noLeading,\n    noLeading = _ref$noLeading === void 0 ? false : _ref$noLeading,\n    _ref$debounceMode = _ref.debounceMode,\n    debounceMode = _ref$debounceMode === void 0 ? undefined : _ref$debounceMode;\n  /*\r\n   * After wrapper has stopped being called, this timeout ensures that\r\n   * `callback` is executed at the proper times in `throttle` and `end`\r\n   * debounce modes.\r\n   */\n  var timeoutID;\n  var cancelled = false;\n\n  // Keep track of the last time `callback` was executed.\n  var lastExec = 0;\n\n  // Function to clear existing timeout\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  }\n\n  // Function to cancel next exec\n  function cancel(options) {\n    var _ref2 = options || {},\n      _ref2$upcomingOnly = _ref2.upcomingOnly,\n      upcomingOnly = _ref2$upcomingOnly === void 0 ? false : _ref2$upcomingOnly;\n    clearExistingTimeout();\n    cancelled = !upcomingOnly;\n  }\n\n  /*\r\n   * The `wrapper` function encapsulates all of the throttling / debouncing\r\n   * functionality and when executed will limit the rate at which `callback`\r\n   * is executed.\r\n   */\n  function wrapper() {\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n      arguments_[_key] = arguments[_key];\n    }\n    var self = this;\n    var elapsed = Date.now() - lastExec;\n    if (cancelled) {\n      return;\n    }\n\n    // Execute `callback` and update the `lastExec` timestamp.\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, arguments_);\n    }\n\n    /*\r\n     * If `debounceMode` is true (at begin) this is used to clear the flag\r\n     * to allow future `callback` executions.\r\n     */\n    function clear() {\n      timeoutID = undefined;\n    }\n    if (!noLeading && debounceMode && !timeoutID) {\n      /*\r\n       * Since `wrapper` is being called for the first time and\r\n       * `debounceMode` is true (at begin), execute `callback`\r\n       * and noLeading != true.\r\n       */\n      exec();\n    }\n    clearExistingTimeout();\n    if (debounceMode === undefined && elapsed > delay) {\n      if (noLeading) {\n        /*\r\n         * In throttle mode with noLeading, if `delay` time has\r\n         * been exceeded, update `lastExec` and schedule `callback`\r\n         * to execute after `delay` ms.\r\n         */\n        lastExec = Date.now();\n        if (!noTrailing) {\n          timeoutID = setTimeout(debounceMode ? clear : exec, delay);\n        }\n      } else {\n        /*\r\n         * In throttle mode without noLeading, if `delay` time has been exceeded, execute\r\n         * `callback`.\r\n         */\n        exec();\n      }\n    } else if (noTrailing !== true) {\n      /*\r\n       * In trailing throttle mode, since `delay` time has not been\r\n       * exceeded, schedule `callback` to execute `delay` ms after most\r\n       * recent execution.\r\n       *\r\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\r\n       * after `delay` ms.\r\n       *\r\n       * If `debounceMode` is false (at end), schedule `callback` to\r\n       * execute after `delay` ms.\r\n       */\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n  wrapper.cancel = cancel;\n\n  // Return the wrapper function.\n  return wrapper;\n}\n\n/* eslint-disable no-undefined */\n\n/**\r\n * Debounce execution of a function. Debouncing, unlike throttling,\r\n * guarantees that a function is only executed a single time, either at the\r\n * very beginning of a series of calls, or at the very end.\r\n *\r\n * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\r\n * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\r\n *                                        to `callback` when the debounced-function is executed.\r\n * @param {object} [options] -           An object to configure options.\r\n * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\r\n *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\r\n *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\r\n *\r\n * @returns {Function} A new, debounced function.\r\n */\nfunction debounce(delay, callback, options) {\n  var _ref = options || {},\n    _ref$atBegin = _ref.atBegin,\n    atBegin = _ref$atBegin === void 0 ? false : _ref$atBegin;\n  return throttle(delay, callback, {\n    debounceMode: atBegin !== false\n  });\n}\nexport { debounce, throttle };","map":null,"metadata":{},"sourceType":"module"}